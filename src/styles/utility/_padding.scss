@use 'sass:meta'; 
@use '../global/mixins' as bp;
@use '../global/tokens' as *;

$paddingIndex: (
  "p": 'padding',
  "pt": 'padding-top',
  "pr": 'padding-right',
  "pb": 'padding-bottom',
  "pl": 'padding-left',
  "px": (
    "left": 'padding-left',
    "right": 'padding-right'
  ),
  "py": (
    "top": 'padding-top',
    "bottom": 'padding-bottom'
  )
);

@each $keyPadding, $valuePadding in $paddingIndex {
  @each $keySize, $valueSize in $tokenSize {
    @if meta.type-of($valuePadding) == 'map' {
      .#{$keyPadding}-#{$keySize} {
        @each $subKey, $subValue in $valuePadding {
          #{$subValue}: #{$valueSize};
        }
      }
    } @else {
      .#{$keyPadding}-#{$keySize} {
        #{$valuePadding}: #{$valueSize};
      }
    }
  }

  @each $keySize, $valueSize in $tokenSize {
    @if meta.type-of($valuePadding) == 'map' {
      @include bp.breakpoint-up(medium) { 
        .#{$keyPadding}-#{$keySize}--md {
          @each $subKey, $subValue in $valuePadding {
            #{$subValue}: #{$valueSize};
          }
        } 
      }
    } @else {
      @include bp.breakpoint-up(medium) { 
        .#{$keyPadding}-#{$keySize}--md {
          #{$valuePadding}: #{$valueSize};
        }
      }
    }
  }

  @each $keySize, $valueSize in $tokenSize {
    @if meta.type-of($valuePadding) == 'map' {
      @include bp.breakpoint-up(medium) { 
        .#{$keyPadding}-#{$keySize}--lg {
          @each $subKey, $subValue in $valuePadding {
            #{$subValue}: #{$valueSize};
          }
        } 
      }
    } @else {
      @include bp.breakpoint-up(medium) { 
        .#{$keyPadding}-#{$keySize}--lg {
          #{$valuePadding}: #{$valueSize};
        }
      }
    }
  }
}


